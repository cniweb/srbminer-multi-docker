# A sample workflow which checks out the code, builds a container
# image using Docker and scans that image for vulnerabilities using
# Snyk. The results are then uploaded to GitHub Security Code Scanning
#
# For more examples, including how to limit scans to only high-severity
# issues, monitor images for newly disclosed vulnerabilities in Snyk and
# fail PR checks for new vulnerabilities, see https://github.com/snyk/actions/

name: Snyk Container

on:
  push:
    branches: [ main ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ main ]
  schedule:
    - cron: '35 21 * * 4'

permissions:
  contents: read

jobs:
  snyk:
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Build a Docker image
      run: docker build -t cniweb/srbminer-multi .
    - name: Run Snyk to check Docker image for vulnerabilities
      # Snyk can be used to break the build when it detects vulnerabilities.
      # In this case we want to upload the issues to GitHub Code Scanning
      continue-on-error: true
      uses: snyk/actions/docker@master
      env:
        # In order to use the Snyk Action you will need to have a Snyk API token.
        # More details in https://github.com/snyk/actions#getting-your-snyk-token
        # or you can signup for free at https://snyk.io/login
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        image: cniweb/srbminer-multi
        args: --file=Dockerfile
    - name: Debug SARIF structure (before patching)
      run: |
        echo "=== SARIF file structure analysis ==="
        # Check if file exists and show basic info
        if [ -f snyk.sarif ]; then
          echo "SARIF file size: $(wc -c < snyk.sarif) bytes"
          echo "SARIF file lines: $(wc -l < snyk.sarif)"
        else
          echo "ERROR: snyk.sarif file not found!"
          exit 1
        fi
        
        # Show a sample of the SARIF structure to understand the format
        echo "=== SARIF structure sample ==="
        jq '.runs[0].tool.driver.rules[0:2] // empty' snyk.sarif 2>/dev/null || echo "No rules found in standard location"
        
        # Look for ALL security-severity fields in the file (both null and non-null)
        echo "=== All security-severity patterns ==="
        grep -n "security-severity" snyk.sarif || echo "No security-severity found with grep"
        
        # Use jq to find ALL security-severity occurrences and their values
        echo "=== Finding ALL security-severity with jq ==="
        jq -r 'paths(scalars) as $p | select(($p | last) == "security-severity") | "Path: " + ($p | join(".")) + " = " + (getpath($p) | tostring) + " (type: " + (getpath($p) | type) + ")"' snyk.sarif || echo "No security-severity found with jq paths"
        
        # Specifically look for JSON null values
        echo "=== Finding JSON null security-severity with jq ==="
        jq -r 'paths(scalars) as $p | select(getpath($p) == null and ($p | last) == "security-severity") | "JSON NULL Path: " + ($p | join("."))' snyk.sarif || echo "No JSON null security-severity found"
        
        # Specifically look for string "null" values
        echo "=== Finding string 'null' security-severity with jq ==="
        jq -r 'paths(scalars) as $p | select(getpath($p) == "null" and ($p | last) == "security-severity") | "STRING NULL Path: " + ($p | join("."))' snyk.sarif || echo "No string 'null' security-severity found"
        
    - name: Patch SARIF file (replace null severity values)
      run: |
        echo "=== Patching SARIF file ==="
        # Fix the root cause: SARIF contains "security-severity": "null" (string) not null (JSON null)
        
        # Strategy 1: Text-based replacement for both JSON null and string "null"
        echo "=== Applying text-based replacement ==="
        # Handle JSON null values
        sed -i -E 's/"security-severity"[[:space:]]*:[[:space:]]*null/"security-severity": "0.0"/g' snyk.sarif
        # Handle string "null" values (the actual problem!)
        sed -i -E 's/"security-severity"[[:space:]]*:[[:space:]]*"null"/"security-severity": "0.0"/g' snyk.sarif
        
        # Strategy 2: Comprehensive jq-based replacement for both null and "null"
        echo "=== Applying jq-based replacement ==="
        jq '
          # Use recursive descent to replace ALL null security-severity values (both JSON null and string "null")
          def fix_security_severity:
            if type == "object" then
              if has("security-severity") and ((.["security-severity"] == null) or (.["security-severity"] == "null")) then
                .["security-severity"] = "0.0"
              else . end |
              with_entries(.value |= fix_security_severity)
            elif type == "array" then
              map(fix_security_severity)
            else
              .
            end;
          
          fix_security_severity
        ' snyk.sarif > snyk.sarif.tmp && mv snyk.sarif.tmp snyk.sarif
        
    - name: Debug SARIF structure (after patching)
      run: |
        echo "=== SARIF file after patching ==="
        # Check for any remaining null security-severity values
        echo "=== Searching for remaining security-severity patterns ==="
        grep -n "security-severity" snyk.sarif | head -10 || echo "No security-severity found with grep"
        
        # Show actual values now present
        echo "=== Finding ALL security-severity values after patching ==="
        jq -r 'paths(scalars) as $p | select(($p | last) == "security-severity") | "Path: " + ($p | join(".")) + " = " + (getpath($p) | tostring) + " (type: " + (getpath($p) | type) + ")"' snyk.sarif || echo "No security-severity found"
        
        # Specifically check for any remaining JSON nulls
        echo "=== Finding remaining JSON null security-severity with jq ==="
        jq -r 'paths(scalars) as $p | select(getpath($p) == null and ($p | last) == "security-severity") | "REMAINING JSON NULL Path: " + ($p | join("."))' snyk.sarif || echo "No JSON null security-severity found"
        
        # Specifically check for any remaining string "null"
        echo "=== Finding remaining string 'null' security-severity with jq ==="
        jq -r 'paths(scalars) as $p | select(getpath($p) == "null" and ($p | last) == "security-severity") | "REMAINING STRING NULL Path: " + ($p | join("."))' snyk.sarif || echo "No string 'null' security-severity found"
        
    - name: Validate SARIF file
      run: |
        echo "=== Final validation ==="
        # Validate that the SARIF file is valid JSON
        jq '.' snyk.sarif > /dev/null && echo "SARIF file is valid JSON" || { echo "ERROR: SARIF file is not valid JSON"; exit 1; }
        
        # Count JSON null security-severity values
        json_null_count=$(jq '[.. | objects | select(has("security-severity") and (.["security-severity"] == null))] | length' snyk.sarif)
        if [ "$json_null_count" -gt 0 ]; then
          echo "ERROR: Found $json_null_count objects with JSON null security-severity values"
          jq '[.. | objects | select(has("security-severity") and (.["security-severity"] == null))]' snyk.sarif
          exit 1
        fi
        
        # Count string "null" security-severity values (the main issue!)
        string_null_count=$(jq '[.. | objects | select(has("security-severity") and (.["security-severity"] == "null"))] | length' snyk.sarif)
        if [ "$string_null_count" -gt 0 ]; then
          echo "ERROR: Found $string_null_count objects with string 'null' security-severity values"
          jq '[.. | objects | select(has("security-severity") and (.["security-severity"] == "null"))]' snyk.sarif
          exit 1
        fi
        
        # Double-check with text search for any remaining JSON null
        if grep -q '"security-severity"[[:space:]]*:[[:space:]]*null[^"]' snyk.sarif; then
          echo "ERROR: Found remaining JSON null security-severity in text search"
          grep -n '"security-severity"[[:space:]]*:[[:space:]]*null[^"]' snyk.sarif
          exit 1
        fi
        
        # Double-check with text search for any remaining string "null"
        if grep -q '"security-severity"[[:space:]]*:[[:space:]]*"null"' snyk.sarif; then
          echo "ERROR: Found remaining string 'null' security-severity in text search"
          grep -n '"security-severity"[[:space:]]*:[[:space:]]*"null"' snyk.sarif
          exit 1
        fi
        
        echo "SUCCESS: No null or 'null' security-severity values found"
        
        # Show summary of security-severity values found
        security_severity_count=$(jq '[.. | objects | select(has("security-severity"))] | length' snyk.sarif)
        echo "INFO: Found $security_severity_count total security-severity properties"
    - name: Upload result to GitHub Code Scanning
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: snyk.sarif
